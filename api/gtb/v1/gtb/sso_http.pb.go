// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.11.2
// source: sso.proto

package gtb

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSsoSignIn = "/sso.Sso/SignIn"

type SsoHTTPServer interface {
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
}

func RegisterSsoHTTPServer(s *http.Server, srv SsoHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/auth/gtb/sign_in", _Sso_SignIn0_HTTP_Handler(srv))
}

func _Sso_SignIn0_HTTP_Handler(srv SsoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SignInRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSsoSignIn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SignIn(ctx, req.(*SignInRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SignInResponse)
		return ctx.Result(200, reply)
	}
}

type SsoHTTPClient interface {
	SignIn(ctx context.Context, req *SignInRequest, opts ...http.CallOption) (rsp *SignInResponse, err error)
}

type SsoHTTPClientImpl struct {
	cc *http.Client
}

func NewSsoHTTPClient(client *http.Client) SsoHTTPClient {
	return &SsoHTTPClientImpl{client}
}

func (c *SsoHTTPClientImpl) SignIn(ctx context.Context, in *SignInRequest, opts ...http.CallOption) (*SignInResponse, error) {
	var out SignInResponse
	pattern := "/api/v1/auth/gtb/sign_in"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSsoSignIn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
